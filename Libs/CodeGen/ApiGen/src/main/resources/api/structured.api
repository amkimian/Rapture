[SQL RDBMS support]
api(Structured) {
    [Create a repository for structured data]
    @entitle=/structured/write
    @public void createStructuredRepo(String uri, String config);

    [Delete a repository for structured data]
    @entitle=/structured/write
    @public void deleteStructuredRepo(String uri);

    [check existence]
    @entitle=/structured/read
    @public Boolean structuredRepoExists(String uri);

    [get a specific structured repo config given a uri]
    @entitle=/structured/read
    @public StructuredRepoConfig getStructuredRepoConfig(String uri);

    [get list of all configurations]
    @entitle=/structured/read
    @public List(StructuredRepoConfig) getStructuredRepoConfigs();

    [create a structured table using raw sql]
    @entitle=/structured/admin/$f(schema)
    @public void createTableUsingSql(String schema, String rawSql);

    [create a structured table using a column name to SQL column type map]
    @entitle=/structured/admin/$f(tableUri)
    @public void createTable(String tableUri, Map(String, String) columns);
    
    [drop a structured table and all of its data]
    @entitle=/structured/admin/$f(tableUri)
    @public void dropTable(String tableUri);

    [check if table exists]
    @entitle=/structured/read/$f(tableUri)
    @public Boolean tableExists(String tableUri);

    [get all schemas]
    @entitle=/structured/read
    @public List<String> getSchemas();

    [get all tables of a certain schema]
    @entitle=/structured/read
    @public List<String> getTables(String repoUri);

    [get table description]
    @entitle=/structured/read/$f(tableUri)
    @public Map<String, String> describeTable(String tableUri);

    [add column(s) to an existing table.  Table must exist beforehand]
    @entitle=/structured/admin/$f(tableUri)
    @public void addTableColumns(String tableUri, Map(String, String) columns);
    
    [remove column(s) from an existing table.  Table must exist beforehand]
    @entitle=/structured/admin/$f(tableUri)
    @public void deleteTableColumns(String tableUri, List(String) columnNames);

    [update column(s) in an existing table.  Table must exist beforehand]
    @entitle=/structured/admin/$f(tableUri)
    @public void updateTableColumns(String tableUri, Map(String, String) columns);

    [rename column(s) in an existing table.  Table must exist beforehand]
    @entitle=/structured/admin/$f(tableUri)
    @public void renameTableColumns(String tableUri, Map(String, String) columnNames);
    
    [create an index on a structured table]
    @entitle=/structured/admin/$f(tableUri)
    @public void createIndex(String tableUri, String indexName, List(String) columnNames);
    
    [remove an index that was previously created on a table]
    @entitle=/structured/admin/$f(tableUri)
    @public void dropIndex(String tableUri, String indexName);

    [get all indexes on a structured table]
    @entitle=/structured/read/$f(tableUri)
    @public List<TableIndex> getIndexes(String tableUri);

    [retrieve data from multiple tables]
    @entitle=/structured/read
    @public List(Map(String, Object)) selectJoinedRows(List(String) tableUris, List(String) columnNames, String from, String where, List(String) order, Boolean ascending, int limit);

    [retrieve data with raw sql]
    @entitle=/structured/read/$f(schema)
    @public List(Map(String, Object)) selectUsingSql(String schema, String rawSql);

    [retrieve data from a single table]
    @entitle=/structured/read/$f(tableUri)
    @public List(Map(String, Object)) selectRows(String tableUri, List(String) columnNames, String where, List(String) order, Boolean ascending, int limit);

    [insert new data with raw sql]
    @entitle=/structured/write/$f(schema)
    @public void insertUsingSql(String schema, String rawSql);

    [insert new data into a single table]
    @entitle=/structured/write/$f(tableUri)
    @public void insertRow(String tableUri, Map(String, Object) values);
    
    [insert one or more rows of data into a single table]
    @entitle=/structured/write/$f(tableUri)
    @public void insertRows(String tableUri, List(Map(String, Object)) values);

    [delete data with raw sql]
    @entitle=/structured/write/$f(schema)
    @public void deleteUsingSql(String schema, String rawSql);

    [delete data from a single table]
    @entitle=/structured/write/$f(tableUri)
    @public void deleteRows(String tableUri, String where);

    [update existing data with raw sql]
    @entitle=/structured/write/$f(schema)
    @public void updateUsingSql(String schema, String rawSql);

    [update existing data from a single table]
    @entitle=/structured/write/$f(tableUri)
    @public void updateRows(String tableUri, Map(String, Object) values, String where);

    [start a transaction]
    @entitle=/structured/write
    @public Boolean begin();

    [commit a transaction]
    @entitle=/structured/write
    @public Boolean commit();

    [rollback a transaction]
    @entitle=/structured/write
    @public Boolean rollback();

    [abort a transaction of given id]
    @entitle=/structured/admin
    @public Boolean abort(String transactionId);

    [get active transactions]
    @entitle=/structured/admin
    @public List(String) getTransactions();

    [generate the DDL sql that represents an entire schema or an individual table in the schema]
    @entitle=/structured/read/$f(uri)
    @public String getDdl(String uri, Boolean includeTableData);

    [retrieve a cursor for row-by-row access to data using raw sql]
    @entitle=/structured/read/$f(schema)
    @public String getCursorUsingSql(String schema, String rawSql);

    [retrieve a cursor for row-by-row access to data]
    @entitle=/structured/read/$f(tableUri)
    @public String getCursor(String tableUri, List(String) columnNames, String where, List(String) order, Boolean ascending, int limit);
    
    [retrieve a cursor for data from multiple tables]
    @entitle=/structured/read
    @public String getCursorForJoin(List(String) tableUris, List(String) columnNames, String from, String where, List(String) order, Boolean ascending, int limit);
    
    [given a cursor id, get the next row in the result set]
    @entitle=/structured/read/$f(tableUri)
    @public List(Map(String, Object)) next(String tableUri, String cursorId, int count);
    
    [given a cursor id, get the next row in the result set]
    @entitle=/structured/read/$f(tableUri)
    @public List(Map(String, Object)) previous(String tableUri, String cursorId, int count);
    
    [close a cursor once done with it]
    @entitle=/structured/read/$f(tableUri)
    @public void closeCursor(String tableUri, String cursorId);

    [Create a stored procedure with raw SQL]
    @entitle=/structured/admin/$f(procUri)
    @public void createStoredProcedure(String procUri, String rawSql, Map<String, String> arguments);

    [Call a stored procedure a value]
    @entitle=/structured/admin/$f(procUri)
    @public StoredProcedureResponse callProcedure(String procUri, StoredProcedureParams params);

    [Delete a stored procedure with raw SQL]
    @entitle=/structured/admin/$f(procUri)
    @public void dropProcedureUsingSql(String procUri, String rawSql);

    [Get primary key of a table]
    @entitle=/structured/read/$f(tableUri)
    @public String getPrimaryKey(String tableUri);

    [Get foreign keys of a table]
    @entitle=/structured/read/$f(tableUri)
    @public List(ForeignKey) getForeignKeys(String tableUri);
    
    [Create a named sequence]
    @entitle=/structured/admin/$f(tableUri)
    @public String createSequence(String tableUri, String column, Map<String, String> arguments);

    [Delete a named sequence]
    @entitle=/structured/admin/$f(tableUri)
    @public Boolean dropSequence(String tableUri, String column, Boolean cascade);

}


/**
 * The MIT License (MIT)
 *
 * Copyright (C) 2011-2016 Incapture Technologies LLC
 *
 * Permission is hereby granted, free of charge, to any person obtaining a copy
 * of this software and associated documentation files (the "Software"), to deal
 * in the Software without restriction, including without limitation the rights
 * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
 * copies of the Software, and to permit persons to whom the Software is
 * furnished to do so, subject to the following conditions:
 *
 * The above copyright notice and this permission notice shall be included in all
 * copies or substantial portions of the Software.
 *
 * THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
 * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
 * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
 * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
 * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
 * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
 * SOFTWARE.
 */

/**
 * This file is autogenerated and any changes will be overwritten
 */

package rapture.common.shared.<apitype; format="lower">;
import java.util.List;
import java.util.Map;

import java.net.HttpURLConnection;

import rapture.common.*;
import rapture.common.EntitlementSet;
<imports; separator="\n">
<retImport>
import rapture.common.exception.RaptureException;
import rapture.common.exception.RaptureExceptionFactory;
import rapture.server.ArgumentParser;
import rapture.kernel.Kernel;
import rapture.common.Messages;
import rapture.server.BaseDispatcher;
import rapture.common.model.GeneralResponse;
import rapture.common.CallingContext;
import rapture.common.DispatchReturn;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import org.apache.log4j.Logger;

@SuppressWarnings("all")
public class <name; format="upcase">Dispatch extends BaseDispatcher {
     private static final Logger log = Logger.getLogger(<name; format="upcase">Dispatch.class);
  @Override
  public DispatchReturn dispatch(String params, HttpServletRequest req, HttpServletResponse resp) {
  	log.debug("dispatch "+params);
    try {
      <name; format="upcase">Payload payload = ArgumentParser.parsePayload(params, <name; format="upcase">Payload.class);
      CallingContext sessionContext = validateSession(req, payload); // will throw RaptNotLoggedInException if not a valid logged in context
      preHandlePayload(sessionContext, payload,  EntitlementSet.<apitype; format="upcase">_<name>.getPath());
<if (!isVoid)>
      <ret> rsp = Kernel.get<apitype>().<name>(sessionContext == null ? payload.getContext() : sessionContext <if(rest(apiparams))>, <rest(apiparams):payset(); separator=","><endif>);
      String ret = processResponse(new GeneralResponse(rsp));
      return new DispatchReturn(sessionContext, ret);
<else>

      Kernel.get<apitype>().<name>(sessionContext == null ? payload.getContext() : sessionContext <if(rest(apiparams))>, <rest(apiparams):payset(); separator=","><endif>);
      String ret = processResponse(new GeneralResponse(new Object()));
      return new DispatchReturn(sessionContext, ret);
<endif>
    }
    catch (RaptureException e) {
      return new DispatchReturn(null, error(e));
    } catch (Exception e) {
        return new DispatchReturn(null, error(RaptureExceptionFactory.create(HttpURLConnection.HTTP_INTERNAL_ERROR, Messages.getMessage("Api", "ServerError", null, null), e)));
    }
  }
}

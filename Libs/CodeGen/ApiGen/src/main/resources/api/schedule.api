[The methods in this API control the scheduler function in a Rapture implementation.]
api(Schedule) {
    [Creates a new job. The executableURI should point to a RaptureScript. 
    A job needs to be activated for it be available for execution. A job can be either auto-activate (i.e. it is activated, 
    then de-activated while it runs, then activated on completion. OR it can be not-auto-activate, whereupon it needs to be activated
    manually, by either a predecessor job (a job that has this job as a dependency) or manually via the activate schedule API call.]
    @entitle=/admin/schedule
    @public RaptureJob createJob(String jobURI, String description, String scriptURI, String cronExpression, String timeZone, Map<String,String> jobParams,
        Boolean autoActivate);

    [Creates a new Workflow-based job. The executableURI should point to a Workflow. A WorkOrder will be created
    when the job is executed. The jobParams will be passed in to the Workflow as the contextMap.
    The maxRuntimeMinutes will be used to throw alerts when the job runs longer than expected.
    A job needs to be activated for it be available for execution. A job can be either auto-activate (i.e. it is activated, 
    then de-activated while it runs, then activated on completion. OR it can be not-auto-activate, whereupon it needs to be activated
    manually, by either a predecessor job (a job that has this job as a dependency) or manually via the activate schedule API call.]
    @entitle=/admin/schedule
    @public RaptureJob createWorkflowJob(String jobURI, String description, String workflowURI, String cronExpression, String timeZone, Map<String,String> jobParams,
        Boolean autoActivate, int maxRuntimeMinutes, String appStatusNamePattern);

    [Activate a job (usually that is not auto-activate). This means that the job will now be picked up by the scheduler and executed at whatever time it is configured to run.]
    @entitle=/admin/schedule
    @public void activateJob(String jobURI, Map(String, String) extraParams);
    
    [Turns off a job's schedule-based execution.]
    @entitle=/admin/schedule
    @public void deactivateJob(String jobURI);
    
    [Retrieve the definition of a job given its URI.]
    @entitle=/admin/schedule
    @public RaptureJob retrieveJob(String jobURI);
    
    [Retrieve the definition of all jobs in the system whose uri starts with a certain prefix (e.g job://my/jobs/date1) ]
    @entitle=/admin/schedule
    @public List(RaptureJob) retrieveJobs(String uriPrefix);

    [Run this job immediately.  If the job has a workflow as an executable, the workOrder URI is returned.]
    @entitle=/admin/schedule
    @public String runJobNow(String jobURI, Map(String, String) extraParams);
    
    [Removes the upcoming scheduled execution of this job and schedules it to run according to the cron in the job configuration.]
    @entitle=/admin/schedule
    @public void resetJob(String jobURI);
    
    [Retrieves the execution of a job.]
    @entitle=/admin/schedule
    @public RaptureJobExec retrieveJobExec(String jobURI, Long execTime);

    [Removes a job from the system.]
    @entitle=/admin/schedule
    @public void deleteJob(String jobURI);

    [Retrieves all of the JobURI addresses of the jobs in the system.]
    @entitle=/admin/schedule
    @public List(String) getJobs();
    
    [Retrieves all of the workflow job execs that are currently running.]
    @entitle=/admin/schedule
    @public List(RaptureJobExec) getRunningWorkflowJobs();

    [Retrieves all of the upcoming jobs in the system.]
    @entitle=/admin/schedule
    @public List<RaptureJobExec> getUpcomingJobs();

    [Retrieves the status of all current workflow-based job executions. This looks into the last execution as well as upcoming execution for all scheduled jobs. The return object contains a list of jobs that succeeded, failed, are overrun, or are ok (i.e. either scheduled to start in the future or currently running but not overrun). For failed or overrun jobs, information is also returned as to whether the failure/overrun has been acknowledged. See also ackJobError.]
    @entitle=/admin/schedule
    @public WorkflowExecsStatus getWorkflowExecsStatus();

    [Acknowledges a job failure, storing the acknowledgment in Rapture. This information is returned when retrieving job statuses. See also getWorkflowExecsStatus.]
    @entitle=/admin/schedule
    @public JobErrorAck ackJobError(String jobURI, Long execTime, String jobErrorType);

    [Gets the next execution time for a given job.]
    @entitle=/admin/schedule
    @public RaptureJobExec getNextExec(String jobURI);

    [Retrieves a list of job executions in a given range.]
    @entitle=/admin/schedule
    @public List(RaptureJobExec) getJobExecs(String jobURI, int start, int count, Boolean reversed);
    
    [Retrieve a list of job executions for a list of jobs. This will return the job executions starting at index start (inclusive), and going on
    for count. If reverse is true, it starts from the end.]
    @entitle=/admin/schedule
    @public List(RaptureJobExec) batchGetJobExecs(List(String) jobURI, int start, int count, Boolean reversed);

    [Return whether the given job is ready to run.]
    @entitle=/admin/schedule
    @public Boolean isJobReadyToRun(String toJobURI);
    
    [For TimeServer, get a list of scheduled events for this week (starts on Sunday, use offset to look at next week)]
    @entitle=/admin/schedule
    @public List(TimedEventRecord) getCurrentWeekTimeRecords(int weekOffsetfromNow);

    [For TimeServer, get a list of scheduled jobs for the current day]
    @entitle=/admin/schedule
    @public List(TimedEventRecord) getCurrentDayJobs();

}
